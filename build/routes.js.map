{"version":3,"sources":["../src/routes.js"],"names":[],"mappings":";;;;;QAsEgB,Y,GAAA,Y;;AAtEhB;;;;AACA;;;;AACA;;AACA;;;;AAEA,SAAS,YAAT,CAAsB,GAAtB,EAA2B,GAA3B,EAAgC;AAC9B,MAAI,YAAY,CAAhB;;AAEA,OAAK,IAAI,UAAT,uBAA+B;AAC7B,QAAI,kBAAO,cAAP,CAAsB,UAAtB,CAAJ,EAAuC;AACrC,kBAAY,KAAK,GAAL,CAAS,kBAAO,UAAP,EAAmB,MAA5B,EAAoC,SAApC,CAAZ;AACD;AACF;;AAED,QAAM,iBAAiB;AACrB,SAAK;AACH,cAAQ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CADL;AAEH,YAAM,CAFH;AAGH,iBAAW;AAHR,KADgB;AAMrB,aAAS,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CANY;AAOrB,eAAW;AAPU,GAAvB;;AAUA,OAAK,IAAI,KAAT,IAAkB,kBAAO,WAAzB,EAAsC;AACpC,UAAM,cAAc,MAAM,IAAN,CAAW,UAAX,CAAsB,CAAtB,IAA2B,EAA/C;AACA,UAAM,aAAa,MAAM,IAAN,CAAW,MAAX,CAAkB,CAAlB,CAAnB;;AAEA,mBAAe,GAAf,CAAmB,MAAnB,CAA0B,cAAc,CAAxC;;AAEA,QAAI,eAAe,GAAnB,EAAwB;AACtB,qBAAe,GAAf,CAAmB,IAAnB;AACD,KAFD,MAEO,IAAI,eAAe,GAAnB,EAAwB;AAC7B,qBAAe,GAAf,CAAmB,SAAnB;AACD;AACF;;AAED,OAAK,IAAI,KAAT,IAAkB,kBAAO,OAAzB,EAAkC;AAChC,UAAM,cAAc,MAAM,IAAN,CAAW,UAAX,CAAsB,CAAtB,IAA2B,EAA/C;;AAEA,mBAAe,OAAf,CAAuB,cAAc,CAArC;AACD;;AAED,OAAK,IAAI,KAAT,IAAkB,kBAAO,SAAzB,EAAoC;AAClC,QAAI,eAAe,SAAf,CAAyB,MAAM,IAA/B,MAAyC,SAA7C,EAAwD;AACtD,qBAAe,SAAf,CAAyB,MAAM,IAA/B,IAAuC,CAAvC;AACD,KAFD,MAEO;AACL,qBAAe,SAAf,CAAyB,MAAM,IAA/B;AACD;AACF;AACH;;;;;;AAME,MAAI,MAAJ,CAAW,OAAX,EAAoB;AAClB,WAAO,cADW;AAElB,eAAW,kCAFO;AAGlB,eAAW,SAHO;AAIlB,eAAW;AACT,uBAAiB,qBAAS,kBAAO,WAAP,CAAmB,KAAnB,EAAT,EAAqC,SAArC,CADR;AAET,iBAAW,qBAAS,kBAAO,OAAP,CAAe,KAAf,EAAT,EAAiC,SAAjC,CAFF;AAGT,mBAAa,qBAAS,kBAAO,SAAP,CAAiB,KAAjB,EAAT,EAAmC,SAAnC,CAHJ;AAIT,eAAS,qBAAS,kBAAO,KAAP,CAAa,KAAb,EAAT,EAA+B,SAA/B;AAJA,KAJO;AAUlB,iBAAa;AAVK,GAApB;AAYD;;AAEM,SAAS,YAAT,GAAwB;AAC7B,QAAM,MAAM,wBAAZ;AACA,QAAM,OAAO,iBAAO,IAApB;;AAEA,MAAI,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AACA,MAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,QAAf,CAAR;;AAEA,MAAI,GAAJ,CAAQ,GAAR,EAAa,YAAb;;AAEA,MAAI,MAAJ,CAAW,IAAX,EAAiB,MAAM;AACrB,YAAQ,GAAR,CAAY,0BAAZ,EAAwC,IAAxC;AACD,GAFD;AAGD","file":"routes.js","sourcesContent":["import express from 'express';\nimport config from '../config';\nimport {orders} from './resources.js';\nimport {padArray} from './utils';\n\nfunction renderOrders(req, res) {\n  let maxOrders = 0;\n\n  for (let restaurant in orders) {\n    if (orders.hasOwnProperty(restaurant)) {\n      maxOrders = Math.max(orders[restaurant].length, maxOrders);\n    }\n  }\n\n  const compoundOrders = {\n    jpn: {\n      orders: [0, 0, 0, 0, 0, 0, 0, 0],\n      soup: 0,\n      chocolate: 0,\n    },\n    veglife: [0, 0, 0, 0],\n    spaghetti: {},\n  };\n\n  for (let order of orders.jedloPodNos) {\n    const mainMealNum = order.text.charCodeAt(0) - 48;\n    const secondMeal = order.text.charAt(2);\n\n    compoundOrders.jpn.orders[mainMealNum - 1]++;\n\n    if (secondMeal === 'p') {\n      compoundOrders.jpn.soup++;\n    } else if (secondMeal === 'k') {\n      compoundOrders.jpn.chocolate++;\n    }\n  }\n\n  for (let order of orders.veglife) {\n    const mainMealNum = order.text.charCodeAt(3) - 48;\n\n    compoundOrders.veglife[mainMealNum - 1]++;\n  }\n\n  for (let order of orders.spaghetti) {\n    if (compoundOrders.spaghetti[order.text] === undefined) {\n      compoundOrders.spaghetti[order.text] = 1;\n    } else {\n      compoundOrders.spaghetti[order.text]++;\n    }\n  }\n/*\n  console.log(padArray(jpn.slice(), maxOrders),\n  padArray(veglife.slice(), maxOrders),\n  padArray(spaghetti.slice(), maxOrders),\n  padArray(nakup.slice(), maxOrders));\n*/\n  res.render('index', {\n    title: 'Obedbot page',\n    tableName: 'Dne\\u0161n\\u00E9 objedn\\u00E1vky',\n    maxOrders: maxOrders,\n    allOrders: {\n      'Jedlo pod nos': padArray(orders.jedloPodNos.slice(), maxOrders),\n      'Veglife': padArray(orders.veglife.slice(), maxOrders),\n      'Spaghetti': padArray(orders.spaghetti.slice(), maxOrders),\n      'Nakup': padArray(orders.nakup.slice(), maxOrders),\n    },\n    shortOrders: compoundOrders,\n  });\n}\n\nexport function startExpress() {\n  const app = express();\n  const port = config.port;\n\n  app.set('view engine', 'pug');\n  app.use(express.static('public'));\n\n  app.get('/', renderOrders);\n\n  app.listen(port, () => {\n    console.log('Server listening on port', port);\n  });\n}\n"]}