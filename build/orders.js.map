{"version":3,"sources":["../src/orders.js"],"names":[],"mappings":"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","file":"orders.js","sourcesContent":["import {RTM_MESSAGE_SUBTYPES} from '@slack/client';\nimport {isNil, isNull} from 'lodash';\nimport {slack, orders} from './resources';\nimport {prettyPrint, stripMention} from './utils';\nimport config from '../config';\n\n// #obedbot-testing id - 'G1TT0TBAA'\n//const channelId = 'G1TT0TBAA';\nconst channelId = config.slack.channelId;\nconst botUserId = config.slack.botId;\nconst atObedbot = new RegExp(`<@${botUserId}>`);\nconst reactions = ['jedlopodnos', 'corn', 'spaghetti', 'shopping_bags'];\n\n/*\n * orders are of form {ts: 'string with timestamp, order: 'string with order'}\n */\nlet veglife = orders.veglife;\nlet jpn = orders.jedloPodNos;\nlet spaghetti = orders.spaghetti;\nlet nakup = orders.nakup;\n\n// ts = timestamp\nlet lastCall = {ts: null, timeLeft: null};\nconst lastCallLength = config.lastCall.length;\nconst lastCallStep = config.lastCall.step;\n\nconst rtm = slack.rtm;\nconst web = slack.web;\n\n\n/**\n * Checks the incoming order and assigns it to the correct restaurant\n *\n * @param {string} order - order message\n * @param {string} ts - timestamp of the order message\n * @returns {bool} - true if order matches, false if not identified\n */\nexport function processOrder(order, ts) {\n  order = order.toLowerCase().trim();\n  console.log('Processing order:', order);\n\n  if (order.match(/^veg[1-4]\\+?[ps]?/)) {\n    console.log('Veglife', order);\n    veglife.push({ts: ts, text: order});\n  } else if (order.match(/^[1-8]\\+[psk]/)) {\n    console.log('Jedlo pod nos');\n    jpn.push({ts: ts, text: order});\n  } else if (order.match(/^[a-z]((300)|(400)|(450)|(600)|(800))([psc]{1,2})?\\+?[pt]?/)) {\n    console.log('Spaghetti');\n    spaghetti.push({ts: ts, text: order});\n  } else if (order.match(/^nakup/)) {\n    console.log('Nakup', order.substring(6));\n    nakup.push({ts: ts, text: order.substring(6)});\n  } else {\n    console.log('ziadna restika, plany poplach');\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Updates the order with the given ts to newOrder\n *\n * @param {string} newOrder - new order message\n * @param {string} ts - timestamp of the order message\n * @returns {bool} - true if order with supplied ts is found, false otherwise\n */\nexport function updateOrder(newOrder, ts) {\n  const orders = [...jpn, ...veglife, ...spaghetti, ...nakup];\n\n  for (let order of orders) {\n    if (order.ts === ts) {\n      order.text = newOrder;\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Removes the order with the given ts\n *\n * @param {string} ts - timestamp of the order message\n * @returns {bool} - true if order with supplied ts is deleted, false otherwise\n */\nexport function removeOrder(ts) {\n  const restaurants = [jpn, veglife, spaghetti, nakup];\n\n  for (let restaurant of restaurants) {\n    for (let order in restaurant) {\n      if (restaurant[order].ts === ts) {\n        restaurant.splice(order, 1);\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Adds reaction to the message to confirm the order\n *\n * @param {string} ts - timestamp of the order message\n *\n */\n\nexport function confirmOrder(ts) {\n  // key of the object is the reaction to the order on slack\n  // reactions are custom/aliases of slack reactions\n  const restaurants = {\n    jedlopodnos: jpn,\n    veglife: veglife,\n    spaghetti: spaghetti,\n    nakup: nakup,\n  };\n\n  for (let key in restaurants) {\n    if (restaurants.hasOwnProperty(key)) {\n      for (let order of restaurants[key]) {\n        if (order.ts === ts) {\n          web.reactions.add(key, {channel: channelId, timestamp: ts});\n        }\n      }\n    }\n  }\n}\n\n/**\n * Checks whether the order with given timestamp exists\n *\n * @param {string} ts - timestamp of the order\n * @returns {bool} - true if order exists, false otherwise\n */\n\nexport function orderExists(ts) {\n  const orders = [...jpn, ...veglife, ...spaghetti, ...nakup];\n\n  for (let order of orders) {\n    if (order.ts === ts) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Deletes and archives all the orders\n */\n\nexport function dropOrders() {\n  for (let restaurant in orders) {\n    if (orders.hasOwnProperty(restaurant)) {\n      orders[restaurant].length = 0;\n    }\n  }\n}\n\n/**\n * Function called by slack api after receiving message event\n *\n * @param {Object} res - response slack api received\n *\n */\n\nexport function messageReceived(res) {\n  console.log('Message Arrived:\\n', prettyPrint(res));\n\n  if (isNil(res.subtype)) {\n    let order = res.text;\n\n    if (order.match(atObedbot)) {\n      order = stripMention(order);\n\n      if (processOrder(order.toLowerCase(), res.ts)) {\n        confirmOrder(res.ts);\n      }\n    }\n  } else if (res.subtype === RTM_MESSAGE_SUBTYPES.MESSAGE_CHANGED) {\n    console.log('Received an edited message');\n\n    // edited last call message came in\n    if (!isNull(lastCall.ts) && res.previous_message.ts === lastCall.ts) {\n      console.log('Received last call message edited by obedbot.');\n    } else {\n      console.log('Received edited message.');\n      let order = res.message.text;\n\n      if (order.match(atObedbot)) {\n        order = stripMention(order);\n\n        if (updateOrder(order, res.message.ts)) {\n          console.log('Updated some order.');\n        } else {\n          console.log('Order with such id does not exist.');\n\n          if (processOrder(order.toLowerCase(), res.message.ts)) {\n            confirmOrder(res.message.ts);\n          }\n        }\n      }\n    }\n  } else if (res.subtype === RTM_MESSAGE_SUBTYPES.MESSAGE_DELETED) {\n    console.log('Deleting order:', res.previous_message.text);\n    removeOrder(res.previous_message.ts);\n  }\n}\n\n/**\n * Loads the orders since the last noon\n */\n\nexport function loadTodayOrders() {\n  console.log('Loading today\\'s orders from', channelId);\n\n  let lastNoon = new Date();\n  let now = lastNoon.getTime();\n\n  if (lastNoon.getHours() < 12) {\n    lastNoon.setDate(lastNoon.getDate() - 1);\n  }\n\n  lastNoon.setHours(12);\n  lastNoon.setMinutes(0);\n  lastNoon.setSeconds(0);\n\n  let messages = web.channels.history(\n    channelId,\n    {\n      latest: now / 1000,\n      oldest: lastNoon.getTime() / 1000,\n    }\n  ).then((data) => {\n    for (let message of data.messages) {\n      console.log(prettyPrint(message));\n\n      let order = message.text;\n      if (!orderExists(message.ts)) {\n        if (order.match(atObedbot)) {\n          order = stripMention(order);\n\n          if (processOrder(order.toLowerCase(), message.ts)) {\n            web.reactions.get(\n              {\n                channel: channelId,\n                timestamp: message.ts,\n                full: true,\n              }\n            ).then((res) => {\n              console.log('Checking order confirmation:', prettyPrint(res));\n\n              if (isNil(res.message.reactions)) {\n                confirmOrder(res.message.ts);\n              } else {\n                console.log('Reactions:', prettyPrint(res.message.reactions));\n\n                // if order hasn't been confirmed\n                if (res.message.reactions.filter((r) => reactions.indexOf(r.name) > -1).length === 0) {\n                  confirmOrder(res.message.ts);\n                }\n              }\n            });\n          }\n        }\n      }\n    }\n    console.log('Loaded today\\'s orders');\n  });\n  console.log('messages', messages);\n}\n\n/**\n * Makes the last call for orders\n */\nexport function makeLastCall(restaurant) {\n  if (isNull(lastCall.ts)) {\n    // no last call ongoing, start one\n    lastCall.timeLeft = lastCallLength;\n    rtm.sendMessage(`@channel Last call ${restaurant}: ${lastCall.timeLeft}`, channelId,\n      (err, msg) => {\n        if (err) {\n          console.error(err);\n        }\n        console.log('Sent last call message', err, msg);\n\n        lastCall.ts = msg.ts;\n        lastCall.timeLeft = lastCallLength;\n\n        setTimeout(() => {makeLastCall(restaurant);}, lastCallStep * 1000);\n      }\n    );\n  } else if (lastCall.timeLeft > 0 && lastCall.timeLeft <= lastCallLength) {\n    // last call ongoing, update it\n    lastCall.timeLeft -= lastCallStep;\n\n    web.chat.update(lastCall.ts, channelId, `@channel Last call ${restaurant}: ${lastCall.timeLeft}`);\n\n    setTimeout(() => {makeLastCall(restaurant);}, lastCallStep * 1000);\n  } else if (lastCall.timeLeft <= 0) {\n    // end of last call\n    web.chat.update(lastCall.ts, channelId, '@channel Koniec objednavok ' + restaurant);\n\n    lastCall.timeLeft = null;\n    lastCall.ts = null;\n  } else {\n    console.log('This should not happen');\n  }\n}\n"]}